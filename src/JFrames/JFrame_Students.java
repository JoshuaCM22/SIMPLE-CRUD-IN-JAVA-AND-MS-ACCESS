package JFrames;

//import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.sql.SQLException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import Connection.DatabaseConnection;
import static JFrames.Objects.con;
import static JFrames.Objects.pst;
import static JFrames.Objects.rs;
import java.sql.Blob;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import net.proteanit.sql.DbUtils;

public class JFrame_Students extends javax.swing.JFrame {

    public static String ImgPath;

    public JFrame_Students() {
        initComponents();
        DatabaseConnection dbc = DatabaseConnection.getDatabaseConnection();
        con = dbc.getConnection();
        SetIcon();
        GetData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanel = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        cmbboxFilter = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnAddNewStudent = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableStudents = new javax.swing.JTable();
        lblTotal = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(1347, 614));

        JPanel.setBackground(new java.awt.Color(51, 0, 102));
        JPanel.setDoubleBuffered(false);
        JPanel.setMaximumSize(null);

        btnBack.setText("BACK");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        cmbboxFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Student ID", "Last Name", "Given Name", "Middle Name", "Gender", "Date of Birth", "Age", "Address" }));
        cmbboxFilter.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        txtSearch.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        btnAddNewStudent.setText("ADD A NEW STUDENT");
        btnAddNewStudent.setBorderPainted(false);
        btnAddNewStudent.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddNewStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewStudentActionPerformed(evt);
            }
        });

        tableStudents.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        tableStudents.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ));
        tableStudents.setFocusable(false);
        tableStudents.setGridColor(java.awt.Color.black);
        tableStudents.setMaximumSize(null);
        tableStudents.setMinimumSize(null);
        tableStudents.setPreferredSize(new java.awt.Dimension(300, 400));
        tableStudents.setSelectionBackground(java.awt.Color.white);
        tableStudents.setSelectionForeground(java.awt.Color.black);
        tableStudents.getTableHeader().setResizingAllowed(false);
        tableStudents.getTableHeader().setReorderingAllowed(false);
        tableStudents.setUpdateSelectionOnSort(false);
        tableStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableStudentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableStudents);

        lblTotal.setBackground(new java.awt.Color(51, 0, 102));
        lblTotal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(255, 255, 255));
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTotal.setText("TOTAL ENTRY:");
        lblTotal.setInheritsPopupMenu(false);

        javax.swing.GroupLayout JPanelLayout = new javax.swing.GroupLayout(JPanel);
        JPanel.setLayout(JPanelLayout);
        JPanelLayout.setHorizontalGroup(
            JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(JPanelLayout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTotal))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, JPanelLayout.createSequentialGroup()
                        .addComponent(cmbboxFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAddNewStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1212, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60))
        );
        JPanelLayout.setVerticalGroup(
            JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbboxFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddNewStudent))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(JPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTotal))
                    .addGroup(JPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnBack)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewStudentActionPerformed
        this.hide();
        JFrame_AddNewStudent nextForm = new JFrame_AddNewStudent();
        nextForm.show();
    }//GEN-LAST:event_btnAddNewStudentActionPerformed
    private void tableStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableStudentsMouseClicked
        String studentId = "";
        try {
            studentId = (this.tableStudents.getValueAt(this.tableStudents.getSelectedRow(), 0).toString());
            pst = con.prepareStatement("SELECT * FROM tbl_students WHERE ID=?");
            pst.setString(1, studentId);
            rs = pst.executeQuery();
            if (rs.next()) {
                JFrame frame = this;
                frame.setEnabled(false);
                JFrame_Profile myform = new JFrame_Profile();
                myform.setVisible(true);
                btnBack.setVisible(false);
                btnAddNewStudent.setVisible(false);
                cmbboxFilter.setVisible(false);
                txtSearch.setVisible(false);
                myform.setLocationRelativeTo(this);
                myform.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                        if (txtSearch.getText().equals("")) {
                            GetData();
                        } else {
                            Searching();
                        }
                        frame.setEnabled(true);
                        btnBack.setVisible(true);
                        btnAddNewStudent.setVisible(true);
                        cmbboxFilter.setVisible(true);
                        txtSearch.setVisible(true);
                    }
                });
                myform.txtStudentId.setText(rs.getInt(1) + "");
                myform.txtLastName.setText(rs.getString(2));
                myform.txtGivenName.setText(rs.getString("given_name"));
                myform.txtMiddleName.setText(rs.getString("middle_name"));
                String tempgender = (rs.getString(5));
                if ("1".equals(tempgender)) {
                    myform.radiobtnMale.setSelected(true);
                } else if ("2".equals(tempgender)) {
                    myform.radiobtnFemale.setSelected(true);
                }
                String getter = rs.getString("date_of_birth");
                DateFormat pattern = new SimpleDateFormat("yyyy-MM-dd");
                Date myDate = pattern.parse(getter);
                java.sql.Date converted = new java.sql.Date(myDate.getTime());
                myform.dcDateOfBirth.setDate(converted);
                myform.txtAge.setText(rs.getInt("age") + "");
                myform.txtAddress.setText(rs.getString("address"));
                Blob filenameBlob = rs.getBlob("Photo");
                byte[] content = filenameBlob.getBytes(1L, (int) filenameBlob.length());
                ImageIcon AA = new ImageIcon(content);
                Image BB = AA.getImage();
                Image CC = BB.getScaledInstance(myform.lblProfile.getWidth(), myform.lblProfile.getHeight(), java.awt.Image.SCALE_SMOOTH);
                AA = new ImageIcon(CC);
                myform.lblProfile.setIcon(AA);
            }
            rs.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, ex);
        }
    }//GEN-LAST:event_tableStudentsMouseClicked
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.setVisible(false);
        JFrame_Main nextForm = new JFrame_Main();
        nextForm.setVisible(true);
    }//GEN-LAST:event_btnBackActionPerformed
    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        if (txtSearch.getText().length() >= 30) {
            evt.consume();
        }
        String stringHolder = (String) cmbboxFilter.getSelectedItem();
        char c = evt.getKeyChar();
        switch (stringHolder) {
            case "None":
                if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE || Character.isWhitespace(c))) {
                    evt.consume();
                }
                break;
            case "Student ID":
                if (!(Character.isDigit(c) || c == KeyEvent.VK_DELETE)) {
                    evt.consume();
                }
                break;
            case "Last Name":
                if (!(Character.isAlphabetic(c) || Character.isWhitespace(c))) {
                    evt.consume();
                }
                break;
            case "Given Name":
                if (!(Character.isAlphabetic(c) || Character.isWhitespace(c))) {
                    evt.consume();
                }
                break;
            case "Middle Name":
                if (!(Character.isAlphabetic(c) || Character.isWhitespace(c))) {
                    evt.consume();
                }
                break;
            case "Gender":
                if (!(Character.isAlphabetic(c) || Character.isWhitespace(c))) {
                    evt.consume();
                }
                break;
            case "Date of Birth":
                if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE || Character.isWhitespace(c))) {
                    evt.consume();
                }
                break;
            case "Age":
                if (!(Character.isAlphabetic(c) || Character.isDigit(c) || c == KeyEvent.VK_DELETE || Character.isWhitespace(c))) {
                    evt.consume();
                }
                break;
        }
    }//GEN-LAST:event_txtSearchKeyTyped
    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (txtSearch.getText().equals("")) {
            GetData();
        } else {
            Searching();
        }
    }//GEN-LAST:event_txtSearchKeyReleased
    private void GetData() {
        txtSearch.setText("");
        this.txtSearch.requestFocus();
        try {

            String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], middle_name AS [MIDDLE NAME], tbl_Genders.[GENDER], tbl_Students.[date_of_birth] AS [DATE OF BIRTH] , tbl_Students.[AGE] AS [AGE], tbl_Students.[ADDRESS] AS [ADDRESS] "
                    + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                    + "ORDER BY tbl_Students.ID;";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
            tableStudents.setRowHeight(25);
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
            tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
            tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
            tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
            tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
            tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
            tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
            tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
            tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
            tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
            tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
            tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
            tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
            tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
            tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
            tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            tableStudents.setSelectionBackground(Color.ORANGE);
            rs.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex);
            System.out.println(ex);
        }
        this.lblTotal.setText("TOTAL ENTRY: " + tableStudents.getRowCount());
    }

    private void Searching() {
        try {
            if (cmbboxFilter.getSelectedItem().equals("None")) {
                GetData();
            } else if (cmbboxFilter.getSelectedItem().equals("Student ID")) {
                String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], tbl_Students.middle_name AS [MIDDLE NAME], "
                        + "tbl_Genders.GENDER, tbl_Students.date_of_birth AS [DATE OF BIRTH], tbl_Students.AGE, tbl_Students.ADDRESS "
                        + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                        + "WHERE ID LIKE ? ORDER BY tbl_Students.ID;";
                pst = con.prepareStatement(sql);
                pst.setString(1, "%" + txtSearch.getText() + "%");
                rs = pst.executeQuery();
                tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
                tableStudents.setRowHeight(25);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
                tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
                tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
                tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            } else if (cmbboxFilter.getSelectedItem().equals("Last Name")) {
                String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], tbl_Students.middle_name AS [MIDDLE NAME], "
                        + "tbl_Genders.GENDER, tbl_Students.date_of_birth AS [DATE OF BIRTH], tbl_Students.AGE, tbl_Students.ADDRESS "
                        + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                        + "WHERE last_name LIKE ? ORDER BY tbl_Students.ID;";
                pst = con.prepareStatement(sql);
                pst.setString(1, "%" + txtSearch.getText() + "%");
                rs = pst.executeQuery();
                tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
                tableStudents.setRowHeight(25);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
                tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
                tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
                tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            } else if (cmbboxFilter.getSelectedItem().equals("Given Name")) {
                String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], tbl_Students.middle_name AS [MIDDLE NAME], "
                        + "tbl_Genders.GENDER, tbl_Students.date_of_birth AS [DATE OF BIRTH], tbl_Students.AGE, tbl_Students.ADDRESS "
                        + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                        + "WHERE given_name LIKE ? ORDER BY tbl_Students.ID;";
                pst = con.prepareStatement(sql);
                pst.setString(1, "%" + txtSearch.getText() + "%");
                rs = pst.executeQuery();
                tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
                tableStudents.setRowHeight(25);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
                tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
                tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
                tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            } else if (cmbboxFilter.getSelectedItem().equals("Middle Name")) {
                String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], tbl_Students.middle_name AS [MIDDLE NAME], "
                        + "tbl_Genders.GENDER, tbl_Students.date_of_birth AS [DATE OF BIRTH], tbl_Students.AGE, tbl_Students.ADDRESS "
                        + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                        + "WHERE middle_name LIKE ? ORDER BY tbl_Students.ID;";
                pst = con.prepareStatement(sql);
                pst.setString(1, "%" + txtSearch.getText() + "%");
                rs = pst.executeQuery();
                tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
                tableStudents.setRowHeight(25);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
                tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
                tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
                tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            } else if (cmbboxFilter.getSelectedItem().equals("Gender")) {
                String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], tbl_Students.middle_name AS [MIDDLE NAME], "
                        + "tbl_Genders.GENDER, tbl_Students.date_of_birth AS [DATE OF BIRTH], tbl_Students.AGE, tbl_Students.ADDRESS "
                        + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                        + "WHERE tbl_Genders.gender LIKE ? ORDER BY tbl_Students.ID;";
                pst = con.prepareStatement(sql);
                pst.setString(1, txtSearch.getText() + "%");
                rs = pst.executeQuery();
                tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
                tableStudents.setRowHeight(25);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
                tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
                tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
                tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            } else if (cmbboxFilter.getSelectedItem().equals("Date of Birth")) {
                String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], tbl_Students.middle_name AS [MIDDLE NAME], "
                        + "tbl_Genders.GENDER, tbl_Students.date_of_birth AS [DATE OF BIRTH], tbl_Students.AGE, tbl_Students.ADDRESS "
                        + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                        + "WHERE date_of_birth LIKE ? ORDER BY tbl_Students.ID;";
                pst = con.prepareStatement(sql);
                pst.setString(1, "%" + txtSearch.getText() + "%");
                rs = pst.executeQuery();
                tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
                tableStudents.setRowHeight(25);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
                tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
                tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
                tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            } else if (cmbboxFilter.getSelectedItem().equals("Age")) {
                String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], tbl_Students.middle_name AS [MIDDLE NAME], "
                        + "tbl_Genders.GENDER, tbl_Students.date_of_birth AS [DATE OF BIRTH], tbl_Students.AGE, tbl_Students.ADDRESS "
                        + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                        + "WHERE age LIKE ? ORDER BY tbl_Students.ID;";
                pst = con.prepareStatement(sql);
                pst.setString(1, "%" + txtSearch.getText() + "%");
                rs = pst.executeQuery();
                tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
                tableStudents.setRowHeight(25);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
                tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
                tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
                tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            } else if (cmbboxFilter.getSelectedItem().equals("Address")) {
                String sql = "SELECT ID AS [STUDENT ID], last_name AS [LAST NAME], given_name AS [GIVEN NAME], tbl_Students.middle_name AS [MIDDLE NAME], "
                        + "tbl_Genders.GENDER, tbl_Students.date_of_birth AS [DATE OF BIRTH], tbl_Students.AGE, tbl_Students.ADDRESS "
                        + "FROM tbl_Students INNER JOIN tbl_Genders ON tbl_Students.gender_id = tbl_Genders.ID "
                        + "WHERE last_name LIKE ? ORDER BY tbl_Students.ID;";
                pst = con.prepareStatement(sql);
                pst.setString(1, "%" + txtSearch.getText() + "%");
                rs = pst.executeQuery();
                tableStudents.setModel(DbUtils.resultSetToTableModel(rs));
                tableStudents.setRowHeight(25);
                DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                tableStudents.getColumnModel().getColumn(0).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(5).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(6).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(7).setCellRenderer(centerRenderer);
                tableStudents.getColumnModel().getColumn(0).setPreferredWidth(210);
                tableStudents.getColumnModel().getColumn(1).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(2).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(3).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(4).setPreferredWidth(120);
                tableStudents.getColumnModel().getColumn(5).setPreferredWidth(260);
                tableStudents.getColumnModel().getColumn(6).setPreferredWidth(60);
                tableStudents.getColumnModel().getColumn(7).setPreferredWidth(800);
            }
            tableStudents.setSelectionBackground(Color.ORANGE);
            rs.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
            System.out.println(ex);
            ex.printStackTrace();
        }
        this.lblTotal.setText("TOTAL ENTRY: " + tableStudents.getRowCount());
    }

    private void SetIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("LOGOICON.png")));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrame_Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrame_Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrame_Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrame_Students.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrame_Students().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel JPanel;
    private javax.swing.JButton btnAddNewStudent;
    private javax.swing.JButton btnBack;
    private javax.swing.JComboBox<String> cmbboxFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotal;
    public javax.swing.JTable tableStudents;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
